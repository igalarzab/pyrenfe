#! /usr/bin/env python
#
#  Check the trains schedule (Renfe, Spain)
#  ===================================================
#
#    Provides a class to check the timetable of the
#    trains in Spain.
#
#    Jose Ignacio Galarza
#    <igalarzab@gmail.com>
#

from datetime import datetime, timedelta, time
import re

from lxml import etree
import requests


class RenfeRoute(object):
    'A renfe route between two stations'

    # API URL (XML)
    URL = 'http://horarios.renfe.com/cer/horarios/horarios.jsp'

    def __init__(self, rfrom, rto):
        'Initialize the route between an origin an a destine'
        self.rfrom = rfrom
        self.rto = rto

    def timetable(self, day=None, initialHour=0, finalHour=24):
        'Show the timetable of the renfe route'
        if not day:
            day = datetime.now().strftime('%Y%m%d')

        if not re.match('^\d{8}$', day):
            raise ValueError('Incorrect date format: %Y%m%d')

        return self._downloadTimetable(day, initialHour, finalHour)

    def nextTrain(self, quantity=1, margin=5):
        'Show the next train'
        now = datetime.now()

        today = now.strftime('%Y%m%d')
        hour = now.strftime('%H')
        nowLimit = time(now.hour, now.minute + margin)

        timetable = self._downloadTimetable(today, hour)

        for i in range(len(timetable)):
            if timetable[i]['leave'] > nowLimit:
                return timetable[i:i + quantity]

        return None

    def _downloadTimetable(self, day, initialHour=0, finalHour=24):
        'Download the timetable from renfe.com'
        params = {
            'nucleo': '10',
            'o': self.rfrom,
            'd': self.rto,
            'df': day,
            'ho': initialHour,
            'hd': finalHour
        }

        req = requests.get(RenfeRoute.URL, params=params)
        timetable = etree.fromstring(req.content)
        trains_timetable = []

        for t in timetable[3]:
            duration = map(int, t[3].text.split(':'))

            trains_timetable.append({
                'train': t[0].text.strip(),
                'leave': time(*map(int, t[1].text.split(':'))),
                'arrive': time(*map(int, t[2].text.split(':'))),
                'time': timedelta(*duration),
            })

        return trains_timetable


class TimetablePrinter(object):
    'Pretty print timetables'

    @staticmethod
    def as_table(timetable):
        'Print the timetable as a table'
        print('-' * 41)
        print('|   Leaves   |   Arrives  |     Line    |')
        print('-' * 41)

        for tt in timetable:
            print('|%(leave)10s  |%(arrive)10s  |%(train)08s     |' % tt)
            print('-' * 41)

    @staticmethod
    def as_text(timetable):
        'Print the timetable as human text'
        for tt in timetable:
            print('Next train leaves at %(leave)s and '
                  'arrives at %(arrive)s (line %(train)s)' % tt)

    @staticmethod
    def as_notification(timetable):
        'Raise a notification with pynotify'
        pass  # TODO: Use pynotify


if __name__ == '__main__':
    rr = RenfeRoute(98003, 18000)
    TimetablePrinter.as_table(rr.nextTrain())

# vim: ai ts=4 sts=4 et sw=4
