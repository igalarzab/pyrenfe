#! /usr/bin/env python
#
#  Check the trains schedule (Renfe, Spain)
#  ===================================================
#
#    Checks the timetable and generates a notification
#    if a train is near to leave the station.
#
#    Jose Ignacio Galarza
#    <igalarzab@gmail.com>
#

from datetime import datetime, timedelta, time
import os
import re
import requests
import subprocess
import sys

try:
    import pynotify
except ImportError:
    pynotify = None


# Data of the request
URL = 'http://horarios.renfe.com/cer/hjcer310.jsp'
O = '98003'
D = '18000'
DF = '20121022'
ho = '00'
hd = '26'


def download_timetable():
    'Download the timetable from renfe.com'

    form = {
        'nucleo': '10', 'i': 's', 'I': 's', 'cp': 'NO', 'CP': 'NO',
        'TXTInfo': '', 'o': O, 'd': D, 'df': DF, 'ho': ho, 'hd': hd
    }

    r = requests.post(URL, data=form)

    schedule = re.compile('<td class=color1 align=center>(.*)</td>')
    matches = [map(int, e.split('.')) for e in schedule.findall(r.text)]

    return [time(x[0], x[1]) for x in matches]


def check_limits(timetable, mini=10, maxi=15):
    'Return trains between mini and maxi minutes from now'
    now = datetime.now()

    low = now + timedelta(0, mini * 60)
    high = now + timedelta(0, maxi * 60)

    # We only care about time
    low, high = low.time(), high.time()

    return filter(lambda x: x > low and x <= high, timetable)


def raise_notification(title, msg):
    'Raise the notification to the system'
    noti = pynotify.Notification(title, msg, 'dialog-warning')
    noti.show()

    # Execute mplayer with a sound (FIXME: Find a better way)
    try:
        parent_dir = os.path.dirname(os.path.realpath(__file__))
        with open('/dev/null', 'wb') as devnull:
            subprocess.Popen(['mplayer', os.path.join(parent_dir,
                'train.mp3')], stdout=devnull, stderr=devnull)
    except:
        pass


def show_help():
    'Show how to use the script'
    print('Use: ./renfe.py [high] [low]')
    sys.exit(0)


if __name__ == '__main__':
    try:
        if len(sys.argv) == 3:
            mini, maxi = map(int, sys.argv[1:])
        elif len(sys.argv) == 2:
            if sys.argv[1] in ('-h', '--help'):
                show_help()
            mini, maxi = 10, int(sys.argv[1])
        elif len(sys.argv) == 1:
            mini, maxi = 10, 15
        else:
            show_help()
    except ValueError:
        show_help()

    trains = check_limits(download_timetable(), mini, maxi)

    if trains:
        msg = 'Next train%s leaving at ' + ', '.join(map(str, trains))
        msg = msg % 's are' if len(trains) > 1 else msg % ' is'

        if sys.stdout.isatty():
            print(msg)
        else:
            if pynotify:
                pynotify.init('renfe-notifier')
                raise_notification('Train leaving...', msg)
    else:
        if sys.stdout.isatty():
            print('No trains')

# vim: ai ts=4 sts=4 et sw=4
